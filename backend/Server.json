import 'dotenv/config';
import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import rateLimit from 'express-rate-limit';
import { z } from 'zod';
import OpenAI from 'openai';

const app = express();

// Security
app.use(helmet({ crossOriginEmbedderPolicy: false, contentSecurityPolicy: false }));

const allowed = (process.env.ALLOWED_ORIGINS || '')
  .split(',')
  .map(s => s.trim())
  .filter(Boolean);

app.use(cors({
  origin: (origin, cb) => {
    if (!origin) return cb(null, true);
    if (allowed.length === 0 || allowed.includes(origin)) return cb(null, true);
    return cb(new Error('Not allowed by CORS'), false);
  },
  credentials: true
}));

app.use(express.json({ limit: '1mb' }));

const limiter = rateLimit({ windowMs: 60_000, max: 60 });
app.use(limiter);

// Simple client auth
app.use((req, res, next) => {
  const token = req.header('X-Client-Token');
  if (!token || token !== process.env.CLIENT_TOKEN) {
    return res.status(401).json({ error: 'Unauthorized' });
  }
  next();
});

// Routes
app.get('/health', (_req, res) => res.json({ ok: true }));

const chatSchema = z.object({
  messages: z.array(z.object({
    role: z.enum(['system', 'user', 'assistant']),
    content: z.string()
  })).min(1),
  model: z.string().optional(),
  temperature: z.number().min(0).max(2).optional()
});

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

app.post('/v1/chat', async (req, res) => {
  const parse = chatSchema.safeParse(req.body);
  if (!parse.success) {
    return res.status(400).json({ error: 'Bad request', details: parse.error.issues });
  }
  const { messages, model, temperature } = parse.data;
  try {
    const response = await openai.chat.completions.create({
      model: model || 'gpt-4o-mini',
      messages,
      temperature: temperature ?? 0.7
    });
    const text = response.choices?.[0]?.message?.content ?? '';
    res.json({ content: text });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'OpenAI error' });
  }
});

// Optional: quick token test
app.get('/test-auth', (_req, res) => res.json({ ok: true, msg: 'Authorized' }));

const port = Number(process.env.PORT || 8787);
app.listen(port, () => {
  console.log(`Lifehack backend listening on http://localhost:8787
